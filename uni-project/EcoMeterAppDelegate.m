//
//  MDAppDelegate.m
//  MultipleMasterDetailViews

#import "EcoMeterAppDelegate.h"
#import "DetailViewManager.h"
#import "KeychainItemWrapper.h"
#import "Reachability.h"
#import "System.h"

@interface EcoMeterAppDelegate()
@property (weak,nonatomic)UISplitViewController* splitViewController;
@end

@implementation EcoMeterAppDelegate
//!!! @synthesize command is generated by default when using properties, yeahh ;-)
//@synthesize window, detailViewManager, splitViewController;

//@synthesize masterDetailManager = __masterDetailManager;


// -------------------------------------------------------------------------------
//	applicationDidFinishLaunching:application
// -------------------------------------------------------------------------------
#define MEASURE_LAUNCH_TIME 1
extern CFAbsoluteTime StartTime;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    
    [self customizeAppearance];
    
    [self setupReachability];
    
    //--------------------------------------------------------------------
    // MagicalRecord Setup - creating the NSPersistentStoreCoordinator,
    // the NSManagedObjectModel and the NSManagedObjectContext. We are using
    // the active record pattern.
    //--------------------------------------------------------------------
    [MagicalRecord setupCoreDataStackWithStoreNamed:CoreDataDBName];
    
    UISplitViewController *splitViewController = (UISplitViewController *)self.window.rootViewController;
    self.splitViewController = splitViewController;
    
    // The new popover look for split views was added in iOS 5.1.
    // This checks if the setting to enable it is available and
    // sets it to YES if so.
    if ([self.splitViewController respondsToSelector:@selector(setPresentsWithGesture:)])
        [self.splitViewController setPresentsWithGesture:YES];
    
    self.detailViewManager = [[DetailViewManager alloc] initWithSplitViewController:splitViewController];
    NSLog(@"calling didFinishLaunchingWithOptions, detailViewManager: %@", self.detailViewManager);
    self.splitViewController.delegate = self.detailViewManager;
    
    self.window.rootViewController = self.splitViewController;
    
#if MEASURE_LAUNCH_TIME
    dispatch_async(dispatch_get_main_queue(), ^ {
        NSLog(@"Launched in %f sec", CFAbsoluteTimeGetCurrent() - StartTime);
    });
#endif
    
    /* LOGGING START
     ****************/
    if ([System countOfEntities]>1) {
        [System truncateAll];
    };
    System *systemObj = [System findFirstByAttribute:@"identifier" withValue:@"primary"];
    if (!systemObj) {
        systemObj = [System createEntity];
        systemObj.identifier = @"primary";
    }
    [MagicalRecord saveInBackgroundWithBlock:^(NSManagedObjectContext *localContext){
        System *localSystem = [systemObj inContext:localContext];
        NSNumber *appstartNumber = @(1);
            if (localSystem.appstartlog < 0) { // something went wrong
            }
            else {
                NSNumber *appstartNumberTemp = localSystem.appstartlog;
                appstartNumber = [NSNumber numberWithInt:[appstartNumberTemp integerValue] +1 ];
                NSLog(@"Starting: appstartNumber: %@", appstartNumber);
            }
        localSystem.appstartlog = appstartNumber;
    } completion:^{
        System *systemObj = [System findFirstByAttribute:@"identifier" withValue:@"primary"];
        NSLog(@"saved System Object :%@", systemObj);
        NSLog(@"saved System Object, appstartlog :%@", systemObj.appstartlog);
    }];
    /* LOGGING END
     ****************/
    
    // Log off user
    /*
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setBool:NO forKey:@"userLoggedIn"];
    NSLog(@"calling didFinishLaunchingWithOptions, userLoggedIn: %i", [defaults boolForKey:@"userLoggedIn"]);
     */
    
    // Delete Account, Testing
//    KeychainItemWrapper *keychain =
//    [[KeychainItemWrapper alloc] initWithIdentifier:@"EcoMeterAccountData" accessGroup:nil];
//    [keychain resetKeychainItem];
    
    
    return YES;
}

// using new appearance proxy (since iOS 5)
- (void)customizeAppearance
{
    // Create resizable images
    UIImage *gradientImage44 = [[UIImage imageNamed:@"navBarBg.png"]
                                resizableImageWithCapInsets:UIEdgeInsetsMake(0, 0, 0, 0)];
    
    // Set the background image for *all* UINavigationBars
    [[UINavigationBar appearance] setBackgroundImage:gradientImage44
                                       forBarMetrics:UIBarMetricsDefault];
    
    // Customize the title text for *all* UINavigationBars
    [[UINavigationBar appearance] setTitleTextAttributes:  [NSDictionary dictionaryWithObjectsAndKeys:
                                                           [UIColor colorWithRed:155/255.0f green:155/255.0f blue:155/255.0f alpha:1.0f], UITextAttributeTextColor,
                                                           [UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.6],UITextAttributeTextShadowColor,
                                                           [NSValue valueWithUIOffset:UIOffsetMake(0, 1)],UITextAttributeTextShadowOffset,
                                                           [UIFont fontWithName:@"QuicksandBold-Regular" size:21.0], UITextAttributeFont, nil]];
    
    // Set the background image for *all* UITabBars
    [[UITabBar appearance] setBackgroundImage:[UIImage imageNamed:@"tabbarBG.png"]];
    [[UITabBar appearance] setSelectionIndicatorImage:[UIImage imageNamed:@"selection-tab.png"]];
    
}


-(void)setupReachability
{
    __weak EcoMeterAppDelegate *weakSelf = self;
    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^{
        // allocate a reachability object
        Reachability* reach = [Reachability reachabilityWithHostname:currentCostServerBaseURLHome];
        
        weakSelf.deviceIsOnline = reach.isReachable;
        
        // set the blocks
        reach.reachableBlock = ^(Reachability*reach)
        {
            weakSelf.deviceIsOnline = YES;
        };
        
        reach.unreachableBlock = ^(Reachability*reach)
        {
            weakSelf.deviceIsOnline = NO;
        };
        // start the notifier which will cause the reachability object to retain itself!
        [reach startNotifier];
    });
}
							
- (void)applicationWillResignActive:(UIApplication *)application
{
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
     */
    

}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    /*
     Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
     */
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    /*
     Called when the application is about to terminate.
     Save data if appropriate.
     See also applicationDidEnterBackground:.
     */
    [MagicalRecord cleanUp];

}

@end
